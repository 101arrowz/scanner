{"mappings":"MAAO,IAAIA,EAAW,GACXC,EAAU,GAInBD,ECJe,CAAC,cAAc,yCAAyC,yCAAyC,yCAAyC,iDAAiD,0CAA0C,yCAAyC,0CAA0C,yCAAyC,0CAA0C,yCAAyC,0CAA0C,yCAAyC,0CAA0C,yCAAyC,yCAAyC,yCAAyC,yCAAyC,yCAAyC,yCAAyC,uCDKtzBC,ECJc,4BCWhBC,KAAKC,iBAAiB,WAAWC,GAAKA,EAAEC,2BAJtC,MAAMC,QAAcC,OAAOC,KAAKP,SAC1BK,EAAMG,OAAOT,GAG6BU,MASlDR,KAAKC,iBAAiB,YAAYC,GAAKA,EAAEC,2BANvC,MAAMM,QAAaJ,OAAOI,aACpBC,QAAQC,IACZF,EAAKG,KAAIC,GAAOA,IAAQd,GAAWM,OAAOS,OAAOD,MAIFE,MAanDf,KAAKC,iBAAiB,SAASe,IAC7BA,EAAIC,2BAZiBC,GACrB,MAAMd,QAAcC,OAAOC,KAAKP,GAChC,IACE,MAAMoB,QAAYC,MAAMF,GAExB,OADAd,EAAMiB,IAAIH,EAAKC,EAAIG,SACZH,EACP,MAAOI,GACP,OAAOnB,EAAMoB,MAAMN,IAKLO,CAAQT,EAAIU","sources":["node_modules/@parcel/service-worker/service-worker.js","node_modules/@parcel/service-worker/runtime-1affec761ef4ea35.js","src/sw.ts"],"sourcesContent":["export let manifest = [];\nexport let version = '';\n\n// Called by the runtime.\nexport function _register(m, v) {\n  manifest = m;\n  version = v;\n}\n","import {_register} from '@parcel/service-worker';\nconst manifest = [\"/index.html\",\"/scanner.36a75a38.png\",\"/scanner.22e57e18.png\",\"/scanner.4f92546c.png\",\"/scanner.0cfafca7.webmanifest\",\"/scanner.edc2ccf8.webp\",\"/scanner.e0388030.png\",\"/scanner.9c0e9440.webp\",\"/scanner.7f602baf.png\",\"/scanner.174b284e.webp\",\"/scanner.0b1caf3b.png\",\"/scanner.b5e5465e.webp\",\"/scanner.f90a7752.png\",\"/scanner.5319085a.webp\",\"/scanner.2fe05084.png\",\"/scanner.c6e18131.xml\",\"/scanner.c222b2de.png\",\"/scanner.5ab17dc4.png\",\"/scanner.71ae865e.png\",\"/scanner.73d4cb4b.png\",\"/index.3bdec287.js\"];\nconst version = \"4a6d5e79\";\n_register(manifest, version);\n","/// <reference no-default-lib=\"true\" />\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n\nimport { manifest, version } from '@parcel/service-worker';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nasync function install() {\n  const cache = await caches.open(version);\n  await cache.addAll(manifest);\n}\n\nself.addEventListener('install', e => e.waitUntil(install()));\n\nasync function activate() {\n  const keys = await caches.keys();\n  await Promise.all(\n    keys.map(key => key !== version && caches.delete(key))\n  );\n}\n\nself.addEventListener('activate', e => e.waitUntil(activate()));\n\nasync function respond(req: Request) {\n  const cache = await caches.open(version);\n  try {\n    const res = await fetch(req);\n    cache.put(req, res.clone());\n    return res;\n  } catch (err) {\n    return cache.match(req);\n  }\n}\n\nself.addEventListener('fetch', evt => {\n  evt.respondWith(respond(evt.request));\n});"],"names":["$b9c9caca8d4422ef$export$e538f94cc8cf4db8","$b9c9caca8d4422ef$export$83d89fbfd8236492","self","addEventListener","e","waitUntil","cache","caches","open","addAll","$8b58c71fb6e38f0b$var$install","keys","Promise","all","map","key","delete","$8b58c71fb6e38f0b$var$activate","evt","respondWith","req","res","fetch","put","clone","err","match","$8b58c71fb6e38f0b$var$respond","request"],"version":3,"file":"sw.js.map"}